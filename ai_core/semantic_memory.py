import datetime
import hashlib
from typing import List, Dict, Any

try:
    import numpy as np  # type: ignore
except ImportError:  # pragma: no cover
    np = None

try:
    import faiss  # type: ignore
except ImportError:  # pragma: no cover
    faiss = None


class SemanticMemory:
    """Simple vector-based semantic memory using FAISS if desired.

    基于向量的语义记忆模块，可选择使用 FAISS 加速。
    """

    def __init__(self, vector_dim: int = 384, use_faiss: bool | None = None) -> None:
        """Initialize memory store and optional FAISS index.

        初始化记忆存储及 FAISS 索引（如果可用）。
        """
        self.vector_dim = vector_dim
        self.records: List[Dict[str, Any]] = []
        if use_faiss is None:
            use_faiss = faiss is not None
        if use_faiss and faiss is not None:
            self.index = faiss.IndexFlatL2(vector_dim)
        else:
            self.index = None

    def _embed(self, text: str):
        """Convert text to a deterministic vector using hashing.

        使用哈希算法将文本转换为确定性向量。
        """
        digest = hashlib.sha256(text.encode("utf-8")).digest()
        if np is not None:
            arr = np.frombuffer(digest, dtype=np.uint8).astype("float32") / 255.0
            if arr.size < self.vector_dim:
                arr = np.pad(arr, (0, self.vector_dim - arr.size))
            return arr[: self.vector_dim]
        vec = [b / 255.0 for b in digest[: self.vector_dim]]
        if len(vec) < self.vector_dim:
            vec += [0.0] * (self.vector_dim - len(vec))
        return vec

    def add_memory(
        self,
        user_text: str,
        ai_response: str,
        mood_tag: str = "neutral",
    ) -> None:
        """Add a conversation record into memory.

        新增一条对话记录到记忆库中。

        Parameters
        ----------
        user_text: str
            User input text.
        ai_response: str
            Reply generated by the system.
        mood_tag: str, optional
            Emotion label associated with the conversation. Defaults to
            ``"neutral"`` when unspecified.
            对应的情绪标签，默认值为 ``"neutral"``。
        """
        vec = self._embed(user_text)
        record = {
            "time": datetime.datetime.utcnow(),
            "user_text": user_text,
            "ai_response": ai_response,
            "mood_tag": mood_tag,
            "topic_vector": vec,
        }
        self.records.append(record)
        if self.index is not None and np is not None:
            self.index.add(np.expand_dims(np.array(vec, dtype="float32"), 0))

    def query_memory(self, prompt: str, top_k: int = 3) -> List[Dict[str, Any]]:
        """Return most relevant past interactions for the prompt.

        根据提示查询最相关的历史对话。
        """
        query_vec = self._embed(prompt)
        if self.index is not None and np is not None and len(self.records) > 0:
            distances, indices = self.index.search(
                np.expand_dims(np.array(query_vec, dtype="float32"), 0), top_k
            )
            result = [self.records[i] for i in indices[0] if i < len(self.records)]
            return result
        # fallback linear search
        # 回退到线性搜索
        def distance(a, b):
            return sum((x - y) ** 2 for x, y in zip(a, b)) ** 0.5

        scores = [distance(r["topic_vector"], query_vec) for r in self.records]
        top_indices = sorted(range(len(scores)), key=lambda i: scores[i])[:top_k]
        return [self.records[i] for i in top_indices]
